# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3.5'

services:
  # 1. RDBMS database
  dev-mysql:
    image: mysql:8.0
    container_name: potential-403-dev-db
    restart: always
    ports:
      - ${DB_PORT}:3306
    environment:
      MYSQL_HOST: localhost
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      TZ: Asia/Seoul
  # # (TBD) prod-mysql:
  # image: mysql:8.0
  # container_name: potential-403-prod-db
  # restart: always
  # ports:
  #   - ${DB_PORT}:3306
  # environment:
  #   MYSQL_HOST: localhost
  #   MYSQL_DATABASE: ${DB_NAME}
  #   MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
  #   TZ: Asia/Seoul
  # 2. redis
  dev-redis:
    image: redis:latest
    container_name: potential-403-dev-cache
    ports:
      - ${REDIS_PORT}
  # # (TBD) production-redis:
  # prod-redis:
  #   image: redis:latest
  #   container_name: potential-403-prod-cache
  #   ports:
  #     - ${REDIS_PORT}

  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: potential-403-server-production
    environment:
      NODE_ENV: production
    ports:
      - 10655:10655
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

